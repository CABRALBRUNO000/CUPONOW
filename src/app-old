import streamlit as st
import asyncio
from services.ai_service import AIService

# Page Configuration
st.set_page_config(
    page_title="Cuponow",
    page_icon="üè∑Ô∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# [Previous CSS styles remain the same]
st.markdown("""
    <style>
        /* Hide Streamlit elements */
        #MainMenu {visibility: hidden;}
        header {visibility: hidden;}
        footer {visibility: hidden;}
        
        /* Improved base styles */
        .stApp {
            background-color: #F8FAFC;
        }
        
        /* Enhanced typography */
        h1, h2, h3 {
            color: #1E293B;
            font-family: 'Inter', -apple-system, system-ui, sans-serif;
            letter-spacing: -0.02em;
        }
        
        /* Refined card styles */
        .card {
            background: white;
            border-radius: 12px;
            padding: 1rem;
            border: 1px solid #E2E8F0;
            box-shadow: 0 2px 8px rgba(0,0,0,0.02);
            margin-bottom: 1.5rem;
        }
        
        /* Enhanced product card */
        .product-card {
            background: white;
            border-radius: 12px;
            border: 1px solid #E2E8F0;
            transition: all 0.3s ease;
            height: 100%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.02);
            margin-bottom: 1.5rem;
        }
        
        .product-card:hover {
            transform: translateY(-6px);
            box-shadow: 0 12px 24px rgba(0,0,0,0.08);
        }
        
        /* Modern button style */
        .custom-button {
            background-color: #3B82F6;
            color: white;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            border: none;
            font-weight: 600;
            transition: all 0.2s ease;
        }
        
        .custom-button:hover {
            background-color: #2563EB;
            transform: translateY(-1px);
        }
        
        /* [Rest of the CSS styles remain the same] */
    </style>
""", unsafe_allow_html=True)

# Header
st.markdown("""
    <div style="text-align: center; padding: 3rem 0;margin-top: -150px;">
        <h1 style="font-size: 3rem; margin-bottom: 1rem; background: linear-gradient(90deg, #3B82F6, #2563EB); -webkit-background-clip: text; -webkit-text-fill-color: transparent;">Cuponow</h1>
        <p style="color: #64748B; font-size: 1.2rem; max-width: 600px; margin: 0 auto;">Encontre as melhores ofertas de forma inteligente com nossa IA</p>
    </div>
""", unsafe_allow_html=True)

# Initialize AI Service
@st.cache_resource
def get_ai_service():
    return AIService()

ai_service = get_ai_service()

# Session state initialization
if "messages" not in st.session_state:
    st.session_state.messages = []
if "products" not in st.session_state:
    st.session_state.products = []

# Stats Row [remains the same]
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown("""
        <div class="stats-box" style="margin-bottom: 1rem;">
            <h3 style="margin: 0; color: #2563EB;">150+</h3>
            <p style="margin: 0; color: #64748B;">Cupons Ativos</p>
        </div>
    """, unsafe_allow_html=True)
with col2:
    st.markdown("""
        <div class="stats-box">
            <h3 style="margin: 0; color: #2563EB;">50+</h3>
            <p style="margin: 0; color: #64748B;">Lojas Parceiras</p>
        </div>
    """, unsafe_allow_html=True)
with col3:
    st.markdown("""
        <div class="stats-box">
            <h3 style="margin: 0; color: #2563EB;">24/7</h3>
            <p style="margin: 0; color: #64748B;">Suporte</p>
        </div>
    """, unsafe_allow_html=True)

# Main content
products_col, chat_col = st.columns([7, 3])

# Products Column
with products_col:
    st.markdown("""
        <div class="card">
            <h2 style="margin-bottom: 1rem;">Produtos em Destaque</h2>
        </div>
    """, unsafe_allow_html=True)
    
    if not st.session_state.products:
        st.info("Inicie uma conversa com o assistente para descobrir ofertas!")
    else:
        # Create rows dynamically based on number of products
        products_per_row = 3
        for i in range(0, len(st.session_state.products), products_per_row):
            cols = st.columns(products_per_row)
            for j in range(products_per_row):
                idx = i + j
                if idx < len(st.session_state.products):
                    product = st.session_state.products[idx]
                    with cols[j]:
                        st.markdown(f"""
                            <div class="product-card">
                                <img src="{product['image']}" style="width: 100%; height: 200px; object-fit: cover; border-radius: 8px 8px 0 0;">
                                <div style="padding: 1rem;">
                                    <div style="color: #2563EB; font-size: 0.875rem; margin-bottom: 0.5rem;">
                                        {product['discount']}% OFF
                                    </div>
                                    <h3 style="font-size: 1rem; margin-bottom: 0.5rem;">{product['name']}</h3>
                                    <div style="display: flex; align-items: baseline; gap: 0.5rem; margin-bottom: 1rem;">
                                        <span style="font-size: 1.25rem; font-weight: 600;">
                                            R$ {product['original_price'] * (1 - product['discount']/100):.2f}
                                        </span>
                                        <span style="color: #64748B; text-decoration: line-through;">
                                            R$ {product['original_price']:.2f}
                                        </span>
                                    </div>
                                    <a href="{product['link']}" target="_blank" style="text-decoration: none;">
                                        <button class="custom-button" style="width: 100%;">
                                            Ver oferta
                                        </button>
                                    </a>
                                </div>
                            </div>
                        """, unsafe_allow_html=True)

# Chat Column
with chat_col:
    st.markdown("""
        <div class="card">
            <h2 style="text-align: center; margin-bottom: 1rem;">Assistente Virtual</h2>
        </div>
    """, unsafe_allow_html=True)
    
    chat_container = st.container()
    
    with chat_container:
        input_container = st.container()
        messages_container = st.container()
        
        with input_container:
            prompt = st.chat_input("Como posso ajudar voc√™ hoje?")
            if prompt:
                st.session_state.messages.append({"role": "user", "content": prompt})
                
                try:
                    response = asyncio.run(ai_service.get_response(
                        prompt,
                        st.session_state.messages[:-1]
                    ))
                    
                    # Handle products - now prepending new products
                    if "products" in response and response["products"]:
                        new_products = []
                        for new_product in response["products"]:
                            if not any(p.get("name") == new_product["name"] for p in st.session_state.products):
                                new_products.append(new_product)
                        
                        # Prepend new products to the existing list
                        st.session_state.products = new_products + st.session_state.products
                    
                    st.session_state.messages.append({"role": "assistant", "content": response["message"]})
                    st.rerun()
                except Exception as e:
                    st.error(f"Erro ao processar a resposta: {str(e)}")
        
        with messages_container:
            for message in reversed(st.session_state.messages):
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])